{"ast":null,"code":"import { GET_CUSTOMER_REQUEST, GET_CUSTOMER_SUCCESS, GET_CUSTOMER_FAILURE, PUT_METERS_REQUEST, PUT_METERS_FAILURE, PUT_METERS_SUCCESS, CLEAR_STATE } from \"./actionTypes\";\nimport axios from \"axios\";\nexport const getCustomerRequest = payload => ({\n  type: GET_CUSTOMER_REQUEST,\n  payload\n});\nexport const getCustomerSuccess = payload => ({\n  type: GET_CUSTOMER_SUCCESS,\n  payload\n});\nexport const getCustomerFailure = payload => ({\n  type: GET_CUSTOMER_FAILURE,\n  payload\n});\nexport const getCustomer = userID => dispatch => {\n  dispatch(getCustomerRequest(userID));\n  axios.get(`http://localhost:5000/metrics/${userID}`).then(res => {\n    dispatch(getCustomerSuccess(res.data));\n  }).catch(err => {\n    dispatch(getCustomerFailure(err.response.data));\n  });\n};\nexport const putMetersRequest = () => ({\n  type: PUT_METERS_REQUEST\n});\nexport const putMetersSuccess = (payload, update) => ({\n  type: PUT_METERS_SUCCESS,\n  payload,\n  update\n});\nexport const putMetersFailure = payload => ({\n  type: PUT_METERS_FAILURE,\n  payload\n});\nexport const putMeters = (userID, meterName, value) => dispatch => {\n  dispatch(putMetersRequest());\n  axios.put(`http://localhost:5000/metrics/limit`, {\n    value,\n    meterName,\n    org: userID\n  }).then(res => {\n    dispatch(putMetersSuccess(res.data, `${meterName}'s limit is updated to ${value}`));\n  }).catch(err => dispatch(putMetersFailure(err.response.data)));\n};\nexport const clearState = () => ({\n  type: CLEAR_STATE\n});","map":{"version":3,"sources":["/home/soumitha-revv/Revv/revv-one/src/redux/actions.js"],"names":["GET_CUSTOMER_REQUEST","GET_CUSTOMER_SUCCESS","GET_CUSTOMER_FAILURE","PUT_METERS_REQUEST","PUT_METERS_FAILURE","PUT_METERS_SUCCESS","CLEAR_STATE","axios","getCustomerRequest","payload","type","getCustomerSuccess","getCustomerFailure","getCustomer","userID","dispatch","get","then","res","data","catch","err","response","putMetersRequest","putMetersSuccess","update","putMetersFailure","putMeters","meterName","value","put","org","clearState"],"mappings":"AAAA,SACEA,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,WAPF,QAQO,eARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,OAAD,KAAc;AAC9CC,EAAAA,IAAI,EAAEV,oBADwC;AAE9CS,EAAAA;AAF8C,CAAd,CAA3B;AAKP,OAAO,MAAME,kBAAkB,GAAIF,OAAD,KAAc;AAC9CC,EAAAA,IAAI,EAAET,oBADwC;AAE9CQ,EAAAA;AAF8C,CAAd,CAA3B;AAKP,OAAO,MAAMG,kBAAkB,GAAIH,OAAD,KAAc;AAC9CC,EAAAA,IAAI,EAAER,oBADwC;AAE9CO,EAAAA;AAF8C,CAAd,CAA3B;AAKP,OAAO,MAAMI,WAAW,GAAIC,MAAD,IAAaC,QAAD,IAAc;AACnDA,EAAAA,QAAQ,CAACP,kBAAkB,CAACM,MAAD,CAAnB,CAAR;AACAP,EAAAA,KAAK,CACFS,GADH,CACQ,iCAAgCF,MAAO,EAD/C,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,IAAAA,QAAQ,CAACJ,kBAAkB,CAACO,GAAG,CAACC,IAAL,CAAnB,CAAR;AACD,GAJH,EAKGC,KALH,CAKUC,GAAD,IAAS;AACdN,IAAAA,QAAQ,CAACH,kBAAkB,CAACS,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAnB,CAAR;AACD,GAPH;AAQD,CAVM;AAYP,OAAO,MAAMI,gBAAgB,GAAG,OAAO;AACrCb,EAAAA,IAAI,EAAEP;AAD+B,CAAP,CAAzB;AAIP,OAAO,MAAMqB,gBAAgB,GAAG,CAACf,OAAD,EAAUgB,MAAV,MAAsB;AACpDf,EAAAA,IAAI,EAAEL,kBAD8C;AAEpDI,EAAAA,OAFoD;AAGpDgB,EAAAA;AAHoD,CAAtB,CAAzB;AAMP,OAAO,MAAMC,gBAAgB,GAAIjB,OAAD,KAAc;AAC5CC,EAAAA,IAAI,EAAEN,kBADsC;AAE5CK,EAAAA;AAF4C,CAAd,CAAzB;AAKP,OAAO,MAAMkB,SAAS,GAAG,CAACb,MAAD,EAASc,SAAT,EAAoBC,KAApB,KAA+Bd,QAAD,IAAc;AACnEA,EAAAA,QAAQ,CAACQ,gBAAgB,EAAjB,CAAR;AACAhB,EAAAA,KAAK,CACFuB,GADH,CACQ,qCADR,EAC8C;AAC1CD,IAAAA,KAD0C;AAE1CD,IAAAA,SAF0C;AAG1CG,IAAAA,GAAG,EAAEjB;AAHqC,GAD9C,EAMGG,IANH,CAMSC,GAAD,IAAS;AACbH,IAAAA,QAAQ,CACNS,gBAAgB,CACdN,GAAG,CAACC,IADU,EAEb,GAAES,SAAU,0BAAyBC,KAAM,EAF9B,CADV,CAAR;AAMD,GAbH,EAcGT,KAdH,CAcUC,GAAD,IAASN,QAAQ,CAACW,gBAAgB,CAACL,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAjB,CAd1B;AAeD,CAjBM;AAmBP,OAAO,MAAMa,UAAU,GAAG,OAAO;AAC/BtB,EAAAA,IAAI,EAAEJ;AADyB,CAAP,CAAnB","sourcesContent":["import {\n  GET_CUSTOMER_REQUEST,\n  GET_CUSTOMER_SUCCESS,\n  GET_CUSTOMER_FAILURE,\n  PUT_METERS_REQUEST,\n  PUT_METERS_FAILURE,\n  PUT_METERS_SUCCESS,\n  CLEAR_STATE,\n} from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const getCustomerRequest = (payload) => ({\n  type: GET_CUSTOMER_REQUEST,\n  payload,\n});\n\nexport const getCustomerSuccess = (payload) => ({\n  type: GET_CUSTOMER_SUCCESS,\n  payload,\n});\n\nexport const getCustomerFailure = (payload) => ({\n  type: GET_CUSTOMER_FAILURE,\n  payload,\n});\n\nexport const getCustomer = (userID) => (dispatch) => {\n  dispatch(getCustomerRequest(userID));\n  axios\n    .get(`http://localhost:5000/metrics/${userID}`)\n    .then((res) => {\n      dispatch(getCustomerSuccess(res.data));\n    })\n    .catch((err) => {\n      dispatch(getCustomerFailure(err.response.data));\n    });\n};\n\nexport const putMetersRequest = () => ({\n  type: PUT_METERS_REQUEST,\n});\n\nexport const putMetersSuccess = (payload, update) => ({\n  type: PUT_METERS_SUCCESS,\n  payload,\n  update,\n});\n\nexport const putMetersFailure = (payload) => ({\n  type: PUT_METERS_FAILURE,\n  payload,\n});\n\nexport const putMeters = (userID, meterName, value) => (dispatch) => {\n  dispatch(putMetersRequest());\n  axios\n    .put(`http://localhost:5000/metrics/limit`, {\n      value,\n      meterName,\n      org: userID,\n    })\n    .then((res) => {\n      dispatch(\n        putMetersSuccess(\n          res.data,\n          `${meterName}'s limit is updated to ${value}`\n        )\n      );\n    })\n    .catch((err) => dispatch(putMetersFailure(err.response.data)));\n};\n\nexport const clearState = () => ({\n  type: CLEAR_STATE,\n});\n"]},"metadata":{},"sourceType":"module"}