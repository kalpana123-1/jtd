{"ast":null,"code":"import { GET_CUSTOMER_FAILURE, GET_CUSTOMER_REQUEST, GET_CUSTOMER_SUCCESS, PUT_METERS_FAILURE, PUT_METERS_REQUEST, PUT_METERS_SUCCESS, CLEAR_STATE } from \"./actionTypes\";\nexport const initState = {\n  error: \"\",\n  errorState: false,\n  customer: null,\n  meters: [],\n  isLoading: false,\n  updated: \"\",\n  queryData: \"\"\n};\nexport const reducer = (state = initState, action) => {\n  switch (action.type) {\n    case GET_CUSTOMER_REQUEST:\n      return { ...state,\n        error: \"\",\n        errorState: false,\n        isLoading: true,\n        customer: null,\n        updated: \"\",\n        meters: [],\n        queryData: action.payload\n      };\n\n    case GET_CUSTOMER_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        customer: action.payload.meters[\"entity_usage_meter\"],\n        meters: Object.keys(action.payload.meters[\"entity_usage_meter\"])\n      };\n\n    case GET_CUSTOMER_FAILURE:\n      return { ...state,\n        isLoading: false,\n        errorState: true,\n        error: action.payload\n      };\n\n    case PUT_METERS_REQUEST:\n      return { ...state,\n        updated: \"\",\n        error: \"\"\n      };\n\n    case PUT_METERS_SUCCESS:\n      return { ...state,\n        updated: action.update,\n        customer: action.payload.meters[\"entity_usage_meter\"]\n      };\n\n    case PUT_METERS_FAILURE:\n      return { ...state,\n        isUpdating: false,\n        updated: \"\",\n        error: action.payload\n      };\n\n    case CLEAR_STATE:\n      return {\n        error: \"\",\n        errorState: false,\n        customer: null,\n        meters: [],\n        isLoading: false,\n        updated: \"\"\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/soumitha-revv/Revv/revv-one/src/redux/reducer.js"],"names":["GET_CUSTOMER_FAILURE","GET_CUSTOMER_REQUEST","GET_CUSTOMER_SUCCESS","PUT_METERS_FAILURE","PUT_METERS_REQUEST","PUT_METERS_SUCCESS","CLEAR_STATE","initState","error","errorState","customer","meters","isLoading","updated","queryData","reducer","state","action","type","payload","Object","keys","update","isUpdating"],"mappings":"AAAA,SACEA,oBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,WAPF,QAQO,eARP;AAUA,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,UAAU,EAAE,KAFW;AAGvBC,EAAAA,QAAQ,EAAE,IAHa;AAIvBC,EAAAA,MAAM,EAAE,EAJe;AAKvBC,EAAAA,SAAS,EAAE,KALY;AAMvBC,EAAAA,OAAO,EAAE,EANc;AAOvBC,EAAAA,SAAS,EAAE;AAPY,CAAlB;AAUP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGT,SAAT,EAAoBU,MAApB,KAA+B;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,oBAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELR,QAAAA,KAAK,EAAE,EAFF;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILG,QAAAA,SAAS,EAAE,IAJN;AAKLF,QAAAA,QAAQ,EAAE,IALL;AAMLG,QAAAA,OAAO,EAAE,EANJ;AAOLF,QAAAA,MAAM,EAAE,EAPH;AAQLG,QAAAA,SAAS,EAAEG,MAAM,CAACE;AARb,OAAP;;AAUF,SAAKjB,oBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLF,QAAAA,QAAQ,EAAEO,MAAM,CAACE,OAAP,CAAeR,MAAf,CAAsB,oBAAtB,CAHL;AAILA,QAAAA,MAAM,EAAES,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACE,OAAP,CAAeR,MAAf,CAAsB,oBAAtB,CAAZ;AAJH,OAAP;;AAMF,SAAKX,oBAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELJ,QAAAA,SAAS,EAAE,KAFN;AAGLH,QAAAA,UAAU,EAAE,IAHP;AAILD,QAAAA,KAAK,EAAES,MAAM,CAACE;AAJT,OAAP;;AAMF,SAAKf,kBAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELH,QAAAA,OAAO,EAAE,EAFJ;AAGLL,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAKH,kBAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELH,QAAAA,OAAO,EAAEI,MAAM,CAACK,MAFX;AAGLZ,QAAAA,QAAQ,EAAEO,MAAM,CAACE,OAAP,CAAeR,MAAf,CAAsB,oBAAtB;AAHL,OAAP;;AAKF,SAAKR,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELO,QAAAA,UAAU,EAAE,KAFP;AAGLV,QAAAA,OAAO,EAAE,EAHJ;AAILL,QAAAA,KAAK,EAAES,MAAM,CAACE;AAJT,OAAP;;AAMF,SAAKb,WAAL;AACE,aAAO;AACLE,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,MAAM,EAAE,EAJH;AAKLC,QAAAA,SAAS,EAAE,KALN;AAMLC,QAAAA,OAAO,EAAE;AANJ,OAAP;;AAQF;AACE,aAAOG,KAAP;AAvDJ;AAyDD,CA1DM","sourcesContent":["import {\n  GET_CUSTOMER_FAILURE,\n  GET_CUSTOMER_REQUEST,\n  GET_CUSTOMER_SUCCESS,\n  PUT_METERS_FAILURE,\n  PUT_METERS_REQUEST,\n  PUT_METERS_SUCCESS,\n  CLEAR_STATE,\n} from \"./actionTypes\";\n\nexport const initState = {\n  error: \"\",\n  errorState: false,\n  customer: null,\n  meters: [],\n  isLoading: false,\n  updated: \"\",\n  queryData: \"\",\n};\n\nexport const reducer = (state = initState, action) => {\n  switch (action.type) {\n    case GET_CUSTOMER_REQUEST:\n      return {\n        ...state,\n        error: \"\",\n        errorState: false,\n        isLoading: true,\n        customer: null,\n        updated: \"\",\n        meters: [],\n        queryData: action.payload,\n      };\n    case GET_CUSTOMER_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        customer: action.payload.meters[\"entity_usage_meter\"],\n        meters: Object.keys(action.payload.meters[\"entity_usage_meter\"]),\n      };\n    case GET_CUSTOMER_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        errorState: true,\n        error: action.payload,\n      };\n    case PUT_METERS_REQUEST:\n      return {\n        ...state,\n        updated: \"\",\n        error: \"\",\n      };\n    case PUT_METERS_SUCCESS:\n      return {\n        ...state,\n        updated: action.update,\n        customer: action.payload.meters[\"entity_usage_meter\"],\n      };\n    case PUT_METERS_FAILURE:\n      return {\n        ...state,\n        isUpdating: false,\n        updated: \"\",\n        error: action.payload,\n      };\n    case CLEAR_STATE:\n      return {\n        error: \"\",\n        errorState: false,\n        customer: null,\n        meters: [],\n        isLoading: false,\n        updated: \"\",\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}