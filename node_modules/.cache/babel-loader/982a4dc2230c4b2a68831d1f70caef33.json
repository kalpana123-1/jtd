{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/soumitha-revv/Revv/revv-one/src/components/exceededModal/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from \"react\";\nimport Modal from \"../../commonComponents/modal\";\nimport exceededModal from \"./exceededModal.module.scss\";\nimport \"../../styles/_common.scss\";\nimport { ModalRowChangeable } from \"./modalRow/modalRowChangeable\";\nimport { ModalRowNonChangeable } from \"./modalRow/modalRowNonChangeable\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { putMeters } from \"../../redux/actions\";\nexport const ExceededModal = ({\n  modalStatus,\n  exceeded,\n  modalData,\n  query,\n  meters,\n  handleChange,\n  handleModalStatus\n}) => {\n  _s();\n\n  const editable = [\"documents\", \"esignatures\", \"templates\", \"user_licences\"];\n  const dispatch = useDispatch();\n  const {\n    updated\n  } = useSelector(state => state.customer);\n\n  const dataUpdate = (data, e) => {\n    let value = e.target.value;\n\n    if (value === \"\") {\n      value = 0;\n    }\n\n    dispatch(putMeters(query, data, Number(value)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      modalStatus: modalStatus,\n      handleModalStatus: handleModalStatus,\n      children: modalStatus && /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: exceededModal.modalOuterDiv,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this), \" \", exceeded && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: exceededModal.warning,\n              children: \"Exceeded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: exceededModal.limits,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"\\xA0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: exceededModal.limitstitle,\n              children: \"Used\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: exceededModal.limitstitle,\n              children: \"Soft Limit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), meters.map((item, index) => editable.includes(item) && /*#__PURE__*/_jsxDEV(ModalRowChangeable, {\n            usage: modalData[item].usage,\n            limit: modalData[item].limit,\n            queryData: item,\n            handleChange: handleChange,\n            dataUpdate: dataUpdate\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this)), meters.map((item, index) => !editable.includes(item) && /*#__PURE__*/_jsxDEV(ModalRowNonChangeable, {\n            usage: modalData[item].usage,\n            limit: modalData[item].limit,\n            queryData: item,\n            handleChange: handleChange,\n            dataUpdate: dataUpdate\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: exceededModal.modalFooter,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: exceededModal.confirmation,\n            children: updated ? updated : \"Your changes will be autosaved\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleModalStatus,\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExceededModal, \"leRsiIZuRWIlXfLlRQ7lhTPaH2E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ExceededModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExceededModal\");","map":{"version":3,"sources":["/home/soumitha-revv/Revv/revv-one/src/components/exceededModal/index.js"],"names":["React","Fragment","Modal","exceededModal","ModalRowChangeable","ModalRowNonChangeable","useDispatch","useSelector","putMeters","ExceededModal","modalStatus","exceeded","modalData","query","meters","handleChange","handleModalStatus","editable","dispatch","updated","state","customer","dataUpdate","data","e","value","target","Number","modalOuterDiv","warning","limits","limitstitle","map","item","index","includes","usage","limit","modalFooter","confirmation"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport Modal from \"../../commonComponents/modal\";\nimport exceededModal from \"./exceededModal.module.scss\";\nimport \"../../styles/_common.scss\";\nimport { ModalRowChangeable } from \"./modalRow/modalRowChangeable\";\nimport { ModalRowNonChangeable } from \"./modalRow/modalRowNonChangeable\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { putMeters } from \"../../redux/actions\";\n\nexport const ExceededModal = ({\n  modalStatus,\n  exceeded,\n  modalData,\n  query,\n  meters,\n  handleChange,\n  handleModalStatus,\n}) => {\n  const editable = [\"documents\", \"esignatures\", \"templates\", \"user_licences\"];\n\n  const dispatch = useDispatch();\n  const { updated } = useSelector((state) => state.customer);\n  const dataUpdate = (data, e) => {\n    let value = e.target.value;\n    if (value === \"\") {\n      value = 0;\n    }\n    dispatch(putMeters(query, data, Number(value)));\n  };\n  return (\n    <div>\n      <Modal modalStatus={modalStatus} handleModalStatus={handleModalStatus}>\n        {modalStatus && (\n          <Fragment>\n            <div className={exceededModal.modalOuterDiv}>\n              <div>\n                <b>{query}</b>{\" \"}\n                {exceeded && (\n                  <span className={exceededModal.warning}>Exceeded</span>\n                )}\n              </div>\n              {/* <div className={exceededModal.cancel}>\n                <button onClick={handleModalStatus}>X</button>\n              </div> */}\n            </div>\n            <div>\n              <div className={exceededModal.limits}>\n                <div>&nbsp;</div>\n                <div className={exceededModal.limitstitle}>Used</div>\n                <div className={exceededModal.limitstitle}>Soft Limit</div>\n              </div>\n              {meters.map(\n                (item, index) =>\n                  editable.includes(item) && (\n                    <ModalRowChangeable\n                      key={index}\n                      usage={modalData[item].usage}\n                      limit={modalData[item].limit}\n                      queryData={item}\n                      handleChange={handleChange}\n                      dataUpdate={dataUpdate}\n                    />\n                  )\n              )}\n              {meters.map(\n                (item, index) =>\n                  !editable.includes(item) && (\n                    <ModalRowNonChangeable\n                      key={index}\n                      usage={modalData[item].usage}\n                      limit={modalData[item].limit}\n                      queryData={item}\n                      handleChange={handleChange}\n                      dataUpdate={dataUpdate}\n                    />\n                  )\n              )}\n            </div>\n\n            <div className={exceededModal.modalFooter}>\n              <span className={exceededModal.confirmation}>\n                {updated ? updated : \"Your changes will be autosaved\"}\n              </span>\n              <button onClick={handleModalStatus}>\n                <b>Done</b>\n              </button>\n            </div>\n          </Fragment>\n        )}\n      </Modal>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}